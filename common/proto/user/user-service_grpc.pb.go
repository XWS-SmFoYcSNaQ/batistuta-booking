// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: user/user-service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_GetAllUsers_FullMethodName            = "/user.UserService/GetAllUsers"
	UserService_ChangeUserInfo_FullMethodName         = "/user.UserService/ChangeUserInfo"
	UserService_ChangePassword_FullMethodName         = "/user.UserService/ChangePassword"
	UserService_GetAllHostsWithRatings_FullMethodName = "/user.UserService/GetAllHostsWithRatings"
	UserService_IsHostFeatured_FullMethodName         = "/user.UserService/IsHostFeatured"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetAllUsers(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*GetAllUsers_Response, error)
	ChangeUserInfo(ctx context.Context, in *ChangeUserInfo_Request, opts ...grpc.CallOption) (*ChangeUserInfo_Response, error)
	ChangePassword(ctx context.Context, in *ChangePassword_Request, opts ...grpc.CallOption) (*Empty_Message, error)
	GetAllHostsWithRatings(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*GetAllHostsWithRatings_Response, error)
	IsHostFeatured(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*IsHostFeatured_Response, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*GetAllUsers_Response, error) {
	out := new(GetAllUsers_Response)
	err := c.cc.Invoke(ctx, UserService_GetAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserInfo(ctx context.Context, in *ChangeUserInfo_Request, opts ...grpc.CallOption) (*ChangeUserInfo_Response, error) {
	out := new(ChangeUserInfo_Response)
	err := c.cc.Invoke(ctx, UserService_ChangeUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePassword_Request, opts ...grpc.CallOption) (*Empty_Message, error) {
	out := new(Empty_Message)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllHostsWithRatings(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*GetAllHostsWithRatings_Response, error) {
	out := new(GetAllHostsWithRatings_Response)
	err := c.cc.Invoke(ctx, UserService_GetAllHostsWithRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsHostFeatured(ctx context.Context, in *Empty_Message, opts ...grpc.CallOption) (*IsHostFeatured_Response, error) {
	out := new(IsHostFeatured_Response)
	err := c.cc.Invoke(ctx, UserService_IsHostFeatured_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetAllUsers(context.Context, *Empty_Message) (*GetAllUsers_Response, error)
	ChangeUserInfo(context.Context, *ChangeUserInfo_Request) (*ChangeUserInfo_Response, error)
	ChangePassword(context.Context, *ChangePassword_Request) (*Empty_Message, error)
	GetAllHostsWithRatings(context.Context, *Empty_Message) (*GetAllHostsWithRatings_Response, error)
	IsHostFeatured(context.Context, *Empty_Message) (*IsHostFeatured_Response, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetAllUsers(context.Context, *Empty_Message) (*GetAllUsers_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserInfo(context.Context, *ChangeUserInfo_Request) (*ChangeUserInfo_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserInfo not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePassword_Request) (*Empty_Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) GetAllHostsWithRatings(context.Context, *Empty_Message) (*GetAllHostsWithRatings_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHostsWithRatings not implemented")
}
func (UnimplementedUserServiceServer) IsHostFeatured(context.Context, *Empty_Message) (*IsHostFeatured_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHostFeatured not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty_Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsers(ctx, req.(*Empty_Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserInfo(ctx, req.(*ChangeUserInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassword_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePassword_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllHostsWithRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty_Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllHostsWithRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllHostsWithRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllHostsWithRatings(ctx, req.(*Empty_Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsHostFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty_Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsHostFeatured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsHostFeatured_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsHostFeatured(ctx, req.(*Empty_Message))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUsers",
			Handler:    _UserService_GetAllUsers_Handler,
		},
		{
			MethodName: "ChangeUserInfo",
			Handler:    _UserService_ChangeUserInfo_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "GetAllHostsWithRatings",
			Handler:    _UserService_GetAllHostsWithRatings_Handler,
		},
		{
			MethodName: "IsHostFeatured",
			Handler:    _UserService_IsHostFeatured_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user-service.proto",
}
