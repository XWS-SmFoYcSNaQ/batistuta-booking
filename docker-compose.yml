version: "3.8"

services:
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    restart: on-failure
    environment:
      GATEWAY_ADDRESS: ${GATEWAY_ADDRESS}
      ACCOMMODATION_SERVICE_ADDRESS: accommodation_service${ACCOMMODATION_SERVICE_ADDRESS}
      BOOKING_SERVICE_ADDRESS: booking_service${BOOKING_SERVICE_ADDRESS}
      USER_SERVICE_ADDRESS: user_service${USER_SERVICE_ADDRESS}
      AUTH_SERVICE_ADDRESS: auth_service${AUTH_SERVICE_ADDRESS}
      RATING_SERVICE_ADDRESS: rating_service:${RATING_SERVICE_ADDRESS}
    depends_on:
      - accommodation_service
      - booking_service
      - rating_service
    ports:
      - "11000:11000"

  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    hostname: accommodation_service
    build:
      context: .
      dockerfile: ./accommodation-service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_SERVICE_ADDRESS: ${ACCOMMODATION_SERVICE_ADDRESS}
      AUTH_SERVICE_ADDRESS: auth_service${AUTH_SERVICE_ADDRESS}
      ACCOMMODATION_DATABASE_ADDRESS: accommodation_database:5432
      ACCOMMODATION_DATABASE_USERNAME: ${ACCOMMODATION_DATABASE_USERNAME}
      ACCOMMODATION_DATABASE_PASSWORD: ${ACCOMMODATION_DATABASE_PASSWORD}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_RATING_COMMAND_SUBJECT: ${CREATE_RATING_COMMAND_SUBJECT}
      CREATE_RATING_REPLY_SUBJECT: ${CREATE_RATING_REPLY_SUBJECT}
      DELETE_RATING_COMMAND_SUBJECT: ${DELETE_RATING_COMMAND_SUBJECT}
      DELETE_RATING_REPLY_SUBJECT: ${DELETE_RATING_REPLY_SUBJECT}
    depends_on:
      - accommodation_database

  accommodation_database:
    image: postgres:15.0-alpine
    container_name: accommodation_database
    hostname: accommodation_database
    environment:
      - POSTGRES_USER=${ACCOMMODATION_DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${ACCOMMODATION_DATABASE_PASSWORD}
    ports:
      - '12102:5432'
    restart: on-failure

  booking_service:
    image: booking_service
    container_name: booking_service
    hostname: booking_service
    build:
      context: .
      dockerfile: ./booking-service/Dockerfile
    restart: always
    environment:
      BOOKING_SERVICE_ADDRESS: ${BOOKING_SERVICE_ADDRESS}
      BOOKING_DATABASE_ADDRESS: booking_database:5432
      BOOKING_DATABASE_USERNAME: ${BOOKING_DATABASE_USERNAME}
      BOOKING_DATABASE_PASSWORD: ${BOOKING_DATABASE_PASSWORD}
      ACCOMMODATION_SERVICE_ADDRESS: accommodation_service${ACCOMMODATION_SERVICE_ADDRESS}
      AUTH_SERVICE_ADDRESS: auth_service${AUTH_SERVICE_ADDRESS}
    depends_on:
      - booking_database

  booking_database:
    image: postgres:15.0-alpine
    container_name: booking_database
    hostname: booking_database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '12103:5432'
    restart: always

  user_service:
    image: user_service
    container_name: user_service
    hostname: user_service
    build:
      context: ./user-service
      dockerfile: user-service\Dockerfile
    restart: always
    environment:
      USER_SERVICE_ADDRESS: ${USER_SERVICE_ADDRESS}
      Services__AUTH_SERVICE_ADDRESS: auth_service${AUTH_SERVICE_ADDRESS}
      Services__RATING_SERVICE_ADDRESS: rating_service:${RATING_SERVICE_ADDRESS}
      Services__BOOKING_SERVICE_ADDRESS: booking_service${BOOKING_SERVICE_ADDRESS}
      NatsConfiguration__HOST: ${NATS_HOST}
      NatsConfiguration__PORT: ${NATS_PORT}
      NatsConfiguration__USER: ${NATS_USER}
      NatsConfiguration__PASSWORD: ${NATS_PASS}
      CreateRatingSubjects__CREATE_RATING_COMMAND_SUBJECT: ${CREATE_RATING_COMMAND_SUBJECT}
      CreateRatingSubjects__CREATE_RATING_REPLAY_SUBJECT: ${CREATE_RATING_REPLY_SUBJECT}
      DeleteRatingSubjects__DELETE_RATING_COMMAND_SUBJECT: ${DELETE_RATING_COMMAND_SUBJECT}
      DeleteRatingSubjects__DELETE_RATING_REPLY_SUBJECT: ${DELETE_RATING_REPLY_SUBJECT}
      MySqlConfig__Server: ${USER_DATABASE_SERVER}
      MySqlConfig__Port: ${USER_DATABASE_PORT}
      MySqlConfig__Database: ${USER_DATABASE}
      MySqlConfig__User: ${USER_DATABASE_USERNAME}
      MySqlConfig__Password: ${USER_DATABASE_PASSWORD}
    depends_on:
      - user_database

  user_database:
    image: mysql:5.7
    container_name: user_database
    hostname: user_database
    environment:
      MYSQL_ROOT_PASSWORD: ${USER_DATABASE_PASSWORD}
      MYSQL_DATABASE: UserServiceDb
    ports:
      - '12101:3306'
    volumes:
      - user_database-mysql-data:/var/lib/mysql
    restart: always

  auth_service:
    image: auth_service
    container_name: auth_service
    hostname: auth_service
    build:
      context: ./auth-service
      dockerfile: auth-service\Dockerfile
    environment:
      AUTH_SERVICE_ADDRESS: ${AUTH_SERVICE_ADDRESS}
      Services__USER_SERVICE_ADDRESS: user_service${USER_SERVICE_ADDRESS}
    restart: always
    depends_on:
      - user_service

  rating_service:
    image: rating_service
    container_name: rating_service
    hostname: rating_service
    build:
      context: .
      dockerfile: ./rating-service/Dockerfile
    restart: on-failure
    environment:
      RATING_SERVICE_PORT: ${RATING_SERVICE_ADDRESS}
      RATING_DB_HOST: rating_database
      RATING_DB_PORT: ${RATING_DB_PORT}
      RATING_DB_USER: ${RATING_DB_USER}
      RATING_DB_PASS: ${RATING_DB_PASS}
      RATING_DB_NAME: ${RATING_DB_NAME}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      AUTH_SERVICE_ADDRESS: auth_service${AUTH_SERVICE_ADDRESS}
      USER_SERVICE_ADDRESS: user_service${USER_SERVICE_ADDRESS}
      CREATE_RATING_COMMAND_SUBJECT: ${CREATE_RATING_COMMAND_SUBJECT}
      CREATE_RATING_REPLY_SUBJECT: ${CREATE_RATING_REPLY_SUBJECT}
      DELETE_RATING_COMMAND_SUBJECT: ${DELETE_RATING_COMMAND_SUBJECT}
      DELETE_RATING_REPLY_SUBJECT: ${DELETE_RATING_REPLY_SUBJECT}
    depends_on:
      - rating_database

  rating_database:
    image: postgres:15.0-alpine
    container_name: rating_database
    hostname: rating_database
    restart: on-failure
    environment:
      POSTGRES_USER: ${RATING_DB_USER}
      POSTGRES_PASSWORD: ${RATING_DB_PASS}
      POSTGRES_DB: ${RATING_DB_NAME}
    ports:
      - '12107:5432'

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    ports:
      - '4222:4222'

  notification_database:
    image: mongo:6-jammy
    container_name: notification_database
    hostname: notification_database
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${NOTIFICATION_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    volumes:
      - notification_database-mongo-data:/data/db
    ports:
      - '12104:27017'
    command: --quiet

  notification_service:
    container_name: notification_service
    hostname: notification_service
    restart: always
    build:
      context: ./notification-service
      dockerfile: notification-service/Dockerfile
    environment:
      NOTIFICATION_SERVICE_ADDRESS: ${NOTIFICATION_SERVICE_ADDRESS}
      DbConfig__Server: ${NOTIFICATION_DB_SERVER}
      DbConfig__Port: ${NOTIFICATION_DB_PORT}
      DbConfig__User: ${NOTIFICATION_DB_USER}
      DbConfig__Password: ${NOTIFICATION_DB_PASSWORD}
      DbConfig__DatabaseName: ${NOTIFICATION_DB_NAME}
      NotificationSubject: ${NOTIFICATION_SUBJECT}
      Services__AuthServiceAddress: ${AUTH_SERVICE_ADDRESS}
    depends_on:
      - notification_database

#  public_app:
#    image: public_app
#    container_name: public_app
#    hostname: public_app
#    build:
#      context: ./public-app/.
#      dockerfile: Dockerfile
#    ports:
#      - "3000:3000"
#    restart: always
#    depends_on:
#      - api_gateway

volumes:
  user_database-mysql-data:
  notification_database-mongo-data:
